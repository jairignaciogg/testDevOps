# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Salesforce Metadata Validate
run-name: Salesforce Metadata Validate

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ "*"]

# permissions:
#   permissions: write-all
permissions: 
  pull-requests: write 

jobs:
  sfdx_validate:
    runs-on: ubuntu-latest
    environment: ${{ github.base_ref }}
    steps:
      - name: Show Org Url
        run: |
          echo ${{ github.base_ref }}
          echo ${{ vars.ORG }}
          if [ ! -n "${{ vars.ORG }}" ]
          then
            echo No se encuentra el ambiente
            exit 1
          fi
        
      - name: Install Tools (Salesforce CLI, Vlocity Build)
        run: |
          npm install -g @salesforce/cli
          echo y | sf plugins:install sfdx-git-delta
          # npm install --global vlocity
      
      - name: Run Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #Get the 
      - name: Create auth file
        env:
          SF_URL: ${{ secrets.SF_URL }}
        run: |
          echo $SF_URL > sfdxurl.json
      
      - name: Authorize an org
        run: |
          sf org login sfdx-url --sfdx-url-file sfdxurl.json --set-default

      - name: Create deltaSFV.py
        env:
          ROBOTINA: ${{ secrets.ROBOTINA }}
        run: |
          echo $ROBOTINA > deltaSFV.py
      
      # github.head_ref Rama Origen del PR
      # github.base_ref Rama Destino del PR
      - name: Run deltaSFV.py
        id: deltaSFV
        run: |
          python DevOps/Scripts/deltaSFV.py ${{ github.head_ref }} ${{ github.base_ref }}
          echo '# Elementos del Deploy:' >> files.md
          #DestructiveChanges
          if test -d temp-Deploy/destructiveChanges/; then
            if test -d temp-Deploy/Salesforce/; then
              echo "typeDeploy=preDestructive" >> "$GITHUB_ENV"
            else
              echo "typeDeploy=onlyDestructive" >> "$GITHUB_ENV"
            fi
            echo '### destructiveChanges.xml' >> files.md
            echo '```xml' >> files.md
            cat temp-Deploy/destructiveChanges/destructiveChanges.xml >> files.md
            echo '' >> files.md
            echo '```' >> files.md
          fi
          #SOURCE-DIR
          if test -d temp-Deploy/Salesforce/; then
            echo '### package.xml' >> files.md
            echo '```xml' >> files.md
            cat temp-Deploy/package.xml >> files.md
            echo '' >> files.md
            echo '```' >> files.md
            echo "typeDeploy=sourceDir" >> "$GITHUB_ENV"
          fi
          #Vlocity
          if test -d temp-Deploy/Vlocity/; then
            echo '### Vlocity' >> files.md
            echo '```' >> files.md
            tree -a ./temp-Deploy/Vlocity/ >> files.md
            echo '' >> files.md
            echo '```' >> files.md
          fi
      
      - name: Comentar PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_tag: Files
          filePath: files.md
          GITHUB_TOKEN: ${{ github.token }}

      - name: Validate SFDX
        id: validate
        run: |
          echo "$typeDeploy"
          if [$typeDeploy == "preDestructive"];then
            sf project deploy validate -x temp-Deploy/destructiveChanges/package.xml --pre-destructive-changes temp-Deploy/destructiveChanges/destructiveChanges.xml -l RunLocalTests --verbose >> validate.md
          elif [$typeDeploy == "onlyDestructive"];then
            sf project deploy validate -x package.xml --pre-destructive-changes package.xml -l RunLocalTests --verbose >> validate.md
          else
            sf project deploy validate -d Salesforce -l RunLocalTests --verbose >> validate.md
          fi

      - name: Comentar PR
        if: ${{ !cancelled() && steps.validate.conclusion != 'skipped' }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: validate.md
          GITHUB_TOKEN: ${{ github.token }}